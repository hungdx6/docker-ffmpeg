--- a/libavformat/rtmpproto.c	2025-03-03 04:08:21.000000000 +0700
+++ b/libavformat/rtmpproto.c	2025-08-02 16:56:41.605170500 +0700
@@ -35,6 +35,7 @@
 #include "libavutil/mem.h"
 #include "libavutil/opt.h"
 #include "libavutil/random_seed.h"
+#include "libavutil/time.h"
 #include "avformat.h"
 #include "internal.h"
 
@@ -134,6 +135,11 @@
     char          auth_params[500];
     int           do_reconnect;
     int           auth_tried;
+    int           reconnect_enabled;     ///< enable auto reconnect on error
+    int           reconnect_timeout;     ///< timeout in seconds for reconnect attempts
+    int64_t       reconnect_start_time;  ///< timestamp when reconnect started
+    int           reconnect_attempts;    ///< number of reconnect attempts made
+    int           max_reconnect_attempts; ///< maximum reconnect attempts before giving up
 } RTMPContext;
 
 #define PLAYER_KEY_OPEN_PART_LEN 30   ///< length of partial key used for first client digest signing
@@ -162,6 +168,7 @@
 static int handle_chunk_size(URLContext *s, RTMPPacket *pkt);
 static int handle_window_ack_size(URLContext *s, RTMPPacket *pkt);
 static int handle_set_peer_bw(URLContext *s, RTMPPacket *pkt);
+static int rtmp_do_reconnect(URLContext *s);
 
 static int add_tracked_method(RTMPContext *rt, const char *name, int id)
 {
@@ -178,8 +185,9 @@
     }
 
     rt->tracked_methods[rt->nb_tracked_methods].name = av_strdup(name);
-    if (!rt->tracked_methods[rt->nb_tracked_methods].name)
+    if (!rt->tracked_methods[rt->nb_tracked_methods].name) {
         return AVERROR(ENOMEM);
+    }
     rt->tracked_methods[rt->nb_tracked_methods].id = id;
     rt->nb_tracked_methods++;
 
@@ -313,7 +321,7 @@
     return 0;
 
 fail:
-    av_log(s, AV_LOG_ERROR, "Invalid AMF parameter: %s\n", param);
+    av_log(s, AV_LOG_ERROR, "RTMP: Invalid AMF parameter: %s\n", param);
     return AVERROR(EINVAL);
 }
 
@@ -345,8 +353,9 @@
 
         // check the string, fourcc + ',' + ...  + end fourcc correct length should be (4+1)*n+4
         if ((fourcc_str_len + 1) % 5 != 0) {
-            av_log(s, AV_LOG_ERROR, "Malformed rtmp_enhanched_codecs, "
+            av_log(s, AV_LOG_ERROR, "RTMP: Malformed rtmp_enhanched_codecs, "
                    "should be of the form hvc1[,av01][,vp09][,...]\n");
+            ff_rtmp_packet_destroy(&pkt);
             return AVERROR(EINVAL);
         }
 
@@ -356,13 +365,21 @@
 
         while(fourcc_data - rt->enhanced_codecs < fourcc_str_len) {
             unsigned char fourcc[5];
-            if (!strncmp(fourcc_data, "hvc1", 4) ||
+            if (!strncmp(fourcc_data, "ac-3", 4) ||
                 !strncmp(fourcc_data, "av01", 4) ||
+                !strncmp(fourcc_data, "avc1", 4) ||
+                !strncmp(fourcc_data, "ec-3", 4) ||
+                !strncmp(fourcc_data, "fLaC", 4) ||
+                !strncmp(fourcc_data, "hvc1", 4) ||
+                !strncmp(fourcc_data, ".mp3", 4) ||
+                !strncmp(fourcc_data, "mp4a", 4) ||
+                !strncmp(fourcc_data, "Opus", 4) ||
                 !strncmp(fourcc_data, "vp09", 4)) {
                     av_strlcpy(fourcc, fourcc_data, sizeof(fourcc));
                     ff_amf_write_string(&p, fourcc);
             } else {
-                    av_log(s, AV_LOG_ERROR, "Unsupported codec fourcc, %.*s\n", 4, fourcc_data);
+                    av_log(s, AV_LOG_ERROR, "RTMP: Unsupported codec fourcc, %.*s\n", 4, fourcc_data);
+                    ff_rtmp_packet_destroy(&pkt);
                     return AVERROR_PATCHWELCOME;
             }
 
@@ -469,7 +486,7 @@
                 return ret;
             }
         } else if (pkt.type == RTMP_CTRL_ABORT_MESSAGE) {
-            av_log(s, AV_LOG_ERROR, "received abort message\n");
+            av_log(s, AV_LOG_ERROR, "RTMP: Received abort message\n");
             ff_rtmp_packet_destroy(&pkt);
             return AVERROR_UNKNOWN;
         } else if (pkt.type == RTMP_PT_BYTES_READ) {
@@ -488,7 +505,7 @@
             // received RTMP Command Message
             break;
         } else {
-            av_log(s, AV_LOG_ERROR, "Unknown control message type (%d)\n", pkt.type);
+            av_log(s, AV_LOG_ERROR, "RTMP: Unknown control message type (%d)\n", pkt.type);
         }
         ff_rtmp_packet_destroy(&pkt);
     }
@@ -496,12 +513,12 @@
     cp = pkt.data;
     bytestream2_init(&gbc, cp, pkt.size);
     if (ff_amf_read_string(&gbc, command, sizeof(command), &stringlen)) {
-        av_log(s, AV_LOG_ERROR, "Unable to read command string\n");
+        av_log(s, AV_LOG_ERROR, "RTMP: Unable to read command string\n");
         ff_rtmp_packet_destroy(&pkt);
         return AVERROR_INVALIDDATA;
     }
     if (strcmp(command, "connect")) {
-        av_log(s, AV_LOG_ERROR, "Expecting connect, got %s\n", command);
+        av_log(s, AV_LOG_ERROR, "RTMP: Expecting connect, got %s\n", command);
         ff_rtmp_packet_destroy(&pkt);
         return AVERROR_INVALIDDATA;
     }
@@ -909,7 +926,7 @@
     int ret;
 
     if (ppkt->size < 6) {
-        av_log(s, AV_LOG_ERROR, "Too short ping packet (%d)\n",
+        av_log(s, AV_LOG_ERROR, "RTMP: Too short ping packet (%d)\n",
                ppkt->size);
         return AVERROR_INVALIDDATA;
     }
@@ -1247,7 +1264,10 @@
     int i;
     int server_pos, client_pos;
     uint8_t digest[32], signature[32];
-    int ret, type = 0;
+    int ret;
+#if CONFIG_FFRTMPCRYPT_PROTOCOL
+    int type = 0;
+#endif
 
     av_log(s, AV_LOG_DEBUG, "Handshaking...\n");
 
@@ -1256,7 +1276,8 @@
     for (i = 9; i <= RTMP_HANDSHAKE_PACKET_SIZE; i++)
         tosend[i] = av_lfg_get(&rnd) >> 24;
 
-    if (CONFIG_FFRTMPCRYPT_PROTOCOL && rt->encrypted) {
+#if CONFIG_FFRTMPCRYPT_PROTOCOL
+    if (rt->encrypted) {
         /* When the client wants to use RTMPE, we have to change the command
          * byte to 0x06 which means to use encrypted data and we have to set
          * the flash version to at least 9.0.115.0. */
@@ -1271,6 +1292,7 @@
         if ((ret = ff_rtmpe_gen_pub_key(rt->stream, tosend + 1)) < 0)
             return ret;
     }
+#endif
 
     client_pos = rtmp_handshake_imprint_with_digest(tosend + 1, rt->encrypted);
     if (client_pos < 0)
@@ -1304,7 +1326,9 @@
             return server_pos;
 
         if (!server_pos) {
+#if CONFIG_FFRTMPCRYPT_PROTOCOL
             type = 1;
+#endif
             server_pos = rtmp_validate_digest(serverdata + 1, 8);
             if (server_pos < 0)
                 return server_pos;
@@ -1334,7 +1358,8 @@
         if (ret < 0)
             return ret;
 
-        if (CONFIG_FFRTMPCRYPT_PROTOCOL && rt->encrypted) {
+#if CONFIG_FFRTMPCRYPT_PROTOCOL
+        if (rt->encrypted) {
             /* Compute the shared secret key sent by the server and initialize
              * the RC4 encryption. */
             if ((ret = ff_rtmpe_compute_secret_key(rt->stream, serverdata + 1,
@@ -1344,6 +1369,7 @@
             /* Encrypt the signature received by the server. */
             ff_rtmpe_encrypt_sig(rt->stream, signature, digest, serverdata[0]);
         }
+#endif
 
         if (memcmp(signature, clientdata + RTMP_HANDSHAKE_PACKET_SIZE - 32, 32)) {
             av_log(s, AV_LOG_ERROR, "Signature mismatch\n");
@@ -1364,25 +1390,30 @@
         if (ret < 0)
             return ret;
 
-        if (CONFIG_FFRTMPCRYPT_PROTOCOL && rt->encrypted) {
+#if CONFIG_FFRTMPCRYPT_PROTOCOL
+        if (rt->encrypted) {
             /* Encrypt the signature to be send to the server. */
             ff_rtmpe_encrypt_sig(rt->stream, tosend +
                                  RTMP_HANDSHAKE_PACKET_SIZE - 32, digest,
                                  serverdata[0]);
         }
+#endif
 
         // write reply back to the server
         if ((ret = ffurl_write(rt->stream, tosend,
                                RTMP_HANDSHAKE_PACKET_SIZE)) < 0)
             return ret;
 
-        if (CONFIG_FFRTMPCRYPT_PROTOCOL && rt->encrypted) {
+#if CONFIG_FFRTMPCRYPT_PROTOCOL
+        if (rt->encrypted) {
             /* Set RC4 keys for encryption and update the keystreams. */
             if ((ret = ff_rtmpe_update_keystream(rt->stream)) < 0)
                 return ret;
         }
+#endif
     } else {
-        if (CONFIG_FFRTMPCRYPT_PROTOCOL && rt->encrypted) {
+#if CONFIG_FFRTMPCRYPT_PROTOCOL
+        if (rt->encrypted) {
             /* Compute the shared secret key sent by the server and initialize
              * the RC4 encryption. */
             if ((ret = ff_rtmpe_compute_secret_key(rt->stream, serverdata + 1,
@@ -1395,16 +1426,19 @@
                                      serverdata[0]);
             }
         }
+#endif
 
         if ((ret = ffurl_write(rt->stream, serverdata + 1,
                                RTMP_HANDSHAKE_PACKET_SIZE)) < 0)
             return ret;
 
-        if (CONFIG_FFRTMPCRYPT_PROTOCOL && rt->encrypted) {
+#if CONFIG_FFRTMPCRYPT_PROTOCOL
+        if (rt->encrypted) {
             /* Set RC4 keys for encryption and update the keystreams. */
             if ((ret = ff_rtmpe_update_keystream(rt->stream)) < 0)
                 return ret;
         }
+#endif
     }
 
     return 0;
@@ -1644,8 +1678,9 @@
     uint8_t hash[16];
     char hashstr[AV_BASE64_SIZE(sizeof(hash))], challenge2[10];
     struct AVMD5 *md5 = av_md5_alloc();
-    if (!md5)
+    if (!md5) {
         return AVERROR(ENOMEM);
+    }
 
     snprintf(challenge2, sizeof(challenge2), "%08x", av_get_random_seed());
 
@@ -1687,8 +1722,9 @@
     const char *nc = "00000001";
     char cnonce[10];
     struct AVMD5 *md5 = av_md5_alloc();
-    if (!md5)
+    if (!md5) {
         return AVERROR(ENOMEM);
+    }
 
     snprintf(cnonce, sizeof(cnonce), "%08x", av_get_random_seed());
 
@@ -1857,7 +1893,7 @@
             }
         } else
             ret = AVERROR_UNKNOWN;
-        av_log(s, level, "Server error: %s\n", tmpstr);
+        av_log(s, level, "RTMP: Server error: %s\n", tmpstr);
     }
 
     av_free(tracked_method);
@@ -1997,7 +2033,7 @@
         pp = spkt.data;
         ff_amf_write_string(&pp, "onFCPublish");
     } else if (!strcmp(command, "publish")) {
-        char statusmsg[128];
+        char statusmsg[sizeof(filename) + 32];
         snprintf(statusmsg, sizeof(statusmsg), "%s is now published", filename);
         ret = write_begin(s);
         if (ret < 0)
@@ -2175,16 +2211,31 @@
             t = ff_amf_get_field_value(ptr, data_end, "code",
                                        tmpstr, sizeof(tmpstr));
         if (!t)
-            av_log(s, AV_LOG_ERROR, "Server error: %s\n", tmpstr);
+            av_log(s, AV_LOG_ERROR, "RTMP: Server error: %s\n", tmpstr);
         return -1;
     }
 
     t = ff_amf_get_field_value(ptr, data_end, "code", tmpstr, sizeof(tmpstr));
-    if (!t && !strcmp(tmpstr, "NetStream.Play.Start")) rt->state = STATE_PLAYING;
-    if (!t && !strcmp(tmpstr, "NetStream.Play.Stop")) rt->state = STATE_STOPPED;
-    if (!t && !strcmp(tmpstr, "NetStream.Play.UnpublishNotify")) rt->state = STATE_STOPPED;
-    if (!t && !strcmp(tmpstr, "NetStream.Publish.Start")) rt->state = STATE_PUBLISHING;
-    if (!t && !strcmp(tmpstr, "NetStream.Seek.Notify")) rt->state = STATE_PLAYING;
+    if (!t && !strcmp(tmpstr, "NetStream.Play.Start")) {
+        rt->state = STATE_PLAYING;
+        av_log(s, AV_LOG_INFO, "RTMP: Stream started playing\n");
+    }
+    if (!t && !strcmp(tmpstr, "NetStream.Play.Stop")) {
+        rt->state = STATE_STOPPED;
+        av_log(s, AV_LOG_INFO, "RTMP: Stream stopped\n");
+    }
+    if (!t && !strcmp(tmpstr, "NetStream.Play.UnpublishNotify")) {
+        rt->state = STATE_STOPPED;
+        av_log(s, AV_LOG_INFO, "RTMP: Stream unpublished, stopping\n");
+    }
+    if (!t && !strcmp(tmpstr, "NetStream.Publish.Start")) {
+        rt->state = STATE_PUBLISHING;
+        av_log(s, AV_LOG_INFO, "RTMP: Started publishing\n");
+    }
+    if (!t && !strcmp(tmpstr, "NetStream.Seek.Notify")) {
+        rt->state = STATE_PLAYING;
+        av_log(s, AV_LOG_DEBUG, "RTMP: Seek completed, resuming playback\n");
+    }
 
     return 0;
 }
@@ -2446,8 +2497,10 @@
     RTMPContext *rt = s->priv_data;
     int ret;
 
-    if (rt->state == STATE_STOPPED)
+    if (rt->state == STATE_STOPPED) {
+        av_log(s, AV_LOG_INFO, "RTMP: Stream is in stopped state, returning EOF\n");
         return AVERROR_EOF;
+    }
 
     for (;;) {
         RTMPPacket rpkt = { 0 };
@@ -2455,8 +2508,47 @@
                                        rt->in_chunk_size, &rt->prev_pkt[0],
                                        &rt->nb_prev_pkt[0])) <= 0) {
             if (ret == 0) {
+                av_log(s, AV_LOG_TRACE, "RTMP: No packet available, returning EAGAIN\n");
                 return AVERROR(EAGAIN);
             } else {
+                // Connection error - attempt reconnect if enabled
+                if (rt->reconnect_enabled && rt->is_input) {
+                    av_log(s, AV_LOG_WARNING, "RTMP: Connection lost, attempting reconnect...\n");
+                    
+                    // Keep trying to reconnect until successful or max attempts reached
+                    while (1) {
+                        ret = rtmp_do_reconnect(s);
+                        if (ret >= 0) {
+                            // Successful reconnection
+                            av_log(s, AV_LOG_INFO, "RTMP: Reconnection successful, continuing stream...\n");
+                            break;
+                        }
+                        
+                        // Check if we should give up
+                        if (rt->reconnect_attempts >= rt->max_reconnect_attempts) {
+                            av_log(s, AV_LOG_ERROR, "RTMP: Maximum reconnect attempts reached (%d), giving up\n", rt->max_reconnect_attempts);
+                            // Reset attempts for next disconnection
+                            rt->reconnect_attempts = 0;
+                            rt->reconnect_start_time = 0;
+                            return ret;
+                        }
+                        
+                        int64_t current_time = av_gettime_relative() / 1000000;
+                        if (current_time - rt->reconnect_start_time > rt->reconnect_timeout) {
+                            av_log(s, AV_LOG_ERROR, "RTMP: Reconnect timeout exceeded (%d seconds), giving up\n", rt->reconnect_timeout);
+                            // Reset attempts for next disconnection
+                            rt->reconnect_attempts = 0;
+                            rt->reconnect_start_time = 0;
+                            return AVERROR(ETIMEDOUT);
+                        }
+                        
+                        // Continue trying...
+                    }
+                    
+                    // Continue the loop to try reading again after successful reconnect
+                    continue;
+                }
+                av_log(s, AV_LOG_ERROR, "RTMP: Packet read failed: %s\n", av_err2str(ret));
                 return AVERROR(EIO);
             }
         }
@@ -2487,6 +2579,7 @@
         }
 
         if (ret < 0) {//serious error in current packet
+            av_log(s, AV_LOG_ERROR, "RTMP: Serious error parsing packet: %s\n", av_err2str(ret));
             ff_rtmp_packet_destroy(&rpkt);
             return ret;
         }
@@ -2495,6 +2588,7 @@
             return 0;
         }
         if (rt->state == STATE_STOPPED) {
+            av_log(s, AV_LOG_INFO, "RTMP: Stream stopped during packet processing\n");
             ff_rtmp_packet_destroy(&rpkt);
             return AVERROR_EOF;
         }
@@ -2531,15 +2625,21 @@
     RTMPContext *rt = h->priv_data;
     int ret = 0, i, j;
 
+    av_log(h, AV_LOG_INFO, "RTMP: Closing connection\n");
+
     if (!rt->is_input) {
         rt->flv_data = NULL;
         if (rt->out_pkt.size)
             ff_rtmp_packet_destroy(&rt->out_pkt);
-        if (rt->state > STATE_FCPUBLISH)
+        if (rt->state > STATE_FCPUBLISH) {
+            av_log(h, AV_LOG_DEBUG, "RTMP: Sending FCUnpublish\n");
             ret = gen_fcunpublish_stream(h, rt);
+        }
     }
-    if (rt->state > STATE_HANDSHAKED)
+    if (rt->state > STATE_HANDSHAKED) {
+        av_log(h, AV_LOG_DEBUG, "RTMP: Sending deleteStream\n");
         ret = gen_delete_stream(h, rt);
+    }
     for (i = 0; i < 2; i++) {
         for (j = 0; j < rt->nb_prev_pkt[i]; j++)
             ff_rtmp_packet_destroy(&rt->prev_pkt[i][j]);
@@ -2549,6 +2649,7 @@
     free_tracked_methods(rt);
     av_freep(&rt->flv_data);
     ffurl_closep(&rt->stream);
+    av_log(h, AV_LOG_INFO, "RTMP: Connection closed\n");
     return ret;
 }
 
@@ -2625,6 +2726,130 @@
  *             and 'playpath' is a file name (the rest of the path,
  *             may be prefixed with "mp4:")
  */
+
+static int rtmp_do_reconnect(URLContext *s)
+{
+    RTMPContext *rt = s->priv_data;
+    char proto[8], hostname[256], path[1024], auth[100];
+    uint8_t buf[2048];
+    int port;
+    int ret;
+    int64_t current_time;
+    int delay;
+
+    if (!rt->reconnect_enabled) {
+        av_log(s, AV_LOG_ERROR, "Reconnect is disabled\n");
+        return AVERROR(EIO);
+    }
+
+    current_time = av_gettime_relative() / 1000000; // Convert to seconds
+
+    // Start reconnect timer if this is the first attempt
+    if (rt->reconnect_attempts == 0) {
+        rt->reconnect_start_time = current_time;
+    }
+
+    rt->reconnect_attempts++;
+    av_log(s, AV_LOG_WARNING, "RTMP: Attempting reconnect #%d/%d\n", 
+           rt->reconnect_attempts, rt->max_reconnect_attempts);
+
+    // Close existing connection
+    if (rt->stream) {
+        ffurl_closep(&rt->stream);
+    }
+
+    // Parse URL again for reconnection
+    av_url_split(proto, sizeof(proto), auth, sizeof(auth),
+                 hostname, sizeof(hostname), &port,
+                 path, sizeof(path), s->filename);
+
+    // Prepare connection string
+    if (!strcmp(proto, "rtmpt") || !strcmp(proto, "rtmpts")) {
+        ff_url_join(buf, sizeof(buf), "ffrtmphttp", NULL, hostname, port, NULL);
+    } else if (!strcmp(proto, "rtmps")) {
+        if (port < 0)
+            port = RTMPS_DEFAULT_PORT;
+        ff_url_join(buf, sizeof(buf), "tls", NULL, hostname, port, NULL);
+    } else if (!strcmp(proto, "rtmpe") || (!strcmp(proto, "rtmpte"))) {
+        ff_url_join(buf, sizeof(buf), "ffrtmpcrypt", NULL, hostname, port, NULL);
+        rt->encrypted = 1;
+    } else {
+        if (port < 0)
+            port = RTMP_DEFAULT_PORT;
+        ff_url_join(buf, sizeof(buf), "tcp", NULL, hostname, port, "?tcp_nodelay=%d", rt->tcp_nodelay);
+    }
+
+    // Attempt reconnection
+    if ((ret = ffurl_open_whitelist(&rt->stream, buf, AVIO_FLAG_READ_WRITE,
+                                    &s->interrupt_callback, NULL,
+                                    s->protocol_whitelist, s->protocol_blacklist, s)) < 0) 
+    {
+        av_log(s, AV_LOG_WARNING, "RTMP: Reconnect attempt #%d failed: %s\n", 
+               rt->reconnect_attempts, av_err2str(ret));
+        
+        // Wait a bit before next attempt (exponential backoff)
+        delay = FFMIN(rt->reconnect_attempts * 2, 10); // Max 10 seconds delay
+        av_usleep(delay * 1000000); // Convert to microseconds
+        
+        // Don't reset attempts counter here - let the caller retry
+        return ret;
+    }
+
+    // Reset connection state
+    rt->state = STATE_START;
+    rt->do_reconnect = 0;
+    rt->nb_invokes = 0;
+    
+    // Clear packet history
+    for (int i = 0; i < 2; i++) {
+        memset(rt->prev_pkt[i], 0, sizeof(**rt->prev_pkt) * rt->nb_prev_pkt[i]);
+    }
+    free_tracked_methods(rt);
+
+    // Reset streaming state variables to avoid timing/buffering issues
+    rt->last_timestamp = 0;
+    rt->flv_off = 0;
+    rt->flv_header_bytes = 0;
+    // Note: Keep bytes_read/last_bytes_read for bandwidth reporting consistency
+
+    // Perform handshake
+    if ((ret = rtmp_handshake(s, rt)) < 0) {
+        av_log(s, AV_LOG_WARNING, "RTMP: Handshake failed during reconnect attempt #%d\n", rt->reconnect_attempts);
+        ffurl_closep(&rt->stream);
+        return ret;
+    }
+
+    rt->out_chunk_size = 128;
+    rt->in_chunk_size = 128;
+    rt->state = STATE_HANDSHAKED;
+
+    // Reconnect to the same app and playpath
+    if ((ret = gen_connect(s, rt)) < 0) {
+        av_log(s, AV_LOG_WARNING, "RTMP: Connect failed during reconnect attempt #%d\n", rt->reconnect_attempts);
+        ffurl_closep(&rt->stream);
+        return ret;
+    }
+
+    // Wait for connection to be established
+    do {
+        ret = get_packet(s, 1);
+    } while (ret == AVERROR(EAGAIN));
+    
+    if (ret < 0) {
+        av_log(s, AV_LOG_WARNING, "RTMP: Failed to establish connection during reconnect attempt #%d\n", rt->reconnect_attempts);
+        ffurl_closep(&rt->stream);
+        return ret;
+    }
+
+    av_log(s, AV_LOG_INFO, "RTMP: Successfully reconnected on attempt #%d\n", rt->reconnect_attempts);
+    
+    // Reset reconnect state after successful reconnection
+    rt->reconnect_attempts = 0;
+    rt->reconnect_start_time = 0;
+    
+    return 0;
+}
+
 static int rtmp_open(URLContext *s, const char *uri, int flags, AVDictionary **opts)
 {
     RTMPContext *rt = s->priv_data;
@@ -2634,6 +2859,8 @@
     int port;
     int ret;
 
+    av_log(s, AV_LOG_INFO, "RTMP: Opening connection to %s\n", uri);
+
     if (rt->listen_timeout > 0)
         rt->listen = 1;
 
@@ -2662,7 +2889,7 @@
     }
 
     if (rt->listen && strcmp(proto, "rtmp")) {
-        av_log(s, AV_LOG_ERROR, "rtmp_listen not available for %s\n",
+        av_log(s, AV_LOG_ERROR, "RTMP: rtmp_listen not available for %s\n",
                proto);
         return AVERROR(EINVAL);
     }
@@ -2700,20 +2927,26 @@
     if ((ret = ffurl_open_whitelist(&rt->stream, buf, AVIO_FLAG_READ_WRITE,
                                     &s->interrupt_callback, opts,
                                     s->protocol_whitelist, s->protocol_blacklist, s)) < 0) {
-        av_log(s , AV_LOG_ERROR, "Cannot open connection %s\n", buf);
+        av_log(s , AV_LOG_ERROR, "RTMP: Cannot open connection %s\n", buf);
         goto fail;
     }
 
     if (rt->swfverify) {
-        if ((ret = rtmp_calc_swfhash(s)) < 0)
+        if ((ret = rtmp_calc_swfhash(s)) < 0) {
+            av_log(s, AV_LOG_ERROR, "RTMP: Failed to calculate SWF hash\n");
             goto fail;
+        }
     }
 
     rt->state = STATE_START;
-    if (!rt->listen && (ret = rtmp_handshake(s, rt)) < 0)
+    if (!rt->listen && (ret = rtmp_handshake(s, rt)) < 0) {
+        av_log(s, AV_LOG_ERROR, "RTMP: Handshake failed\n");
         goto fail;
-    if (rt->listen && (ret = rtmp_server_handshake(s, rt)) < 0)
+    }
+    if (rt->listen && (ret = rtmp_server_handshake(s, rt)) < 0) {
+        av_log(s, AV_LOG_ERROR, "RTMP: Server handshake failed\n");
         goto fail;
+    }
 
     rt->out_chunk_size = 128;
     rt->in_chunk_size  = 128; // Probably overwritten later
@@ -2724,6 +2957,7 @@
 
     rt->app = av_malloc(APP_MAX_LENGTH);
     if (!rt->app) {
+        av_log(s, AV_LOG_ERROR, "RTMP: Failed to allocate memory for app name\n");
         ret = AVERROR(ENOMEM);
         goto fail;
     }
@@ -2774,6 +3008,7 @@
     if (old_app) {
         // The name of application has been defined by the user, override it.
         if (strlen(old_app) >= APP_MAX_LENGTH) {
+            av_log(s, AV_LOG_ERROR, "RTMP: Application name too long\n");
             ret = AVERROR(EINVAL);
             goto fail;
         }
@@ -2787,6 +3022,7 @@
             max_len = strlen(fname) + 5; // add prefix "mp4:"
         rt->playpath = av_malloc(max_len);
         if (!rt->playpath) {
+            av_log(s, AV_LOG_ERROR, "RTMP: Failed to allocate memory for playpath\n");
             ret = AVERROR(ENOMEM);
             goto fail;
         }
@@ -2811,6 +3047,7 @@
     if (!rt->tcurl) {
         rt->tcurl = av_malloc(TCURL_MAX_LENGTH);
         if (!rt->tcurl) {
+            av_log(s, AV_LOG_ERROR, "RTMP: Failed to allocate memory for tcurl\n");
             ret = AVERROR(ENOMEM);
             goto fail;
         }
@@ -2821,6 +3058,7 @@
     if (!rt->flashver) {
         rt->flashver = av_malloc(FLASHVER_MAX_LENGTH);
         if (!rt->flashver) {
+            av_log(s, AV_LOG_ERROR, "RTMP: Failed to allocate memory for flashver\n");
             ret = AVERROR(ENOMEM);
             goto fail;
         }
@@ -2843,21 +3081,35 @@
     rt->max_sent_unacked = 2500000;
     rt->duration = 0;
 
-    av_log(s, AV_LOG_DEBUG, "Proto = %s, path = %s, app = %s, fname = %s\n",
+    // Initialize reconnect state
+    rt->reconnect_attempts = 0;
+    rt->reconnect_start_time = 0;
+    
+    // Initialize reconnect fields
+    rt->reconnect_attempts = 0;
+    rt->reconnect_start_time = 0;
+
+    av_log(s, AV_LOG_DEBUG, "RTMP: Proto = %s, path = %s, app = %s, fname = %s\n",
            proto, path, rt->app, rt->playpath);
     if (!rt->listen) {
-        if ((ret = gen_connect(s, rt)) < 0)
+        if ((ret = gen_connect(s, rt)) < 0) {
+            av_log(s, AV_LOG_ERROR, "RTMP: Failed to generate connect packet\n");
             goto fail;
+        }
     } else {
-        if ((ret = read_connect(s, s->priv_data)) < 0)
+        if ((ret = read_connect(s, s->priv_data)) < 0) {
+            av_log(s, AV_LOG_ERROR, "RTMP: Failed to read connect packet\n");
             goto fail;
+        }
     }
 
     do {
         ret = get_packet(s, 1);
     } while (ret == AVERROR(EAGAIN));
-    if (ret < 0)
+    if (ret < 0) {
+        av_log(s, AV_LOG_ERROR, "RTMP: Failed to get initial packet\n");
         goto fail;
+    }
 
     if (rt->do_reconnect) {
         int i;
@@ -2874,8 +3126,10 @@
     if (rt->is_input) {
         // generate FLV header for demuxer
         rt->flv_size = 13;
-        if ((ret = av_reallocp(&rt->flv_data, rt->flv_size)) < 0)
+        if ((ret = av_reallocp(&rt->flv_data, rt->flv_size)) < 0) {
+            av_log(s, AV_LOG_ERROR, "RTMP: Failed to allocate FLV data buffer\n");
             goto fail;
+        }
         rt->flv_off  = 0;
         memcpy(rt->flv_data, "FLV\1\0\0\0\0\011\0\0\0\0", rt->flv_size);
 
@@ -2885,8 +3139,10 @@
         // the FLV decoder will allocate the needed streams when their first
         // audio or video packet arrives.
         while (!rt->has_audio && !rt->has_video && !rt->received_metadata) {
-            if ((ret = get_packet(s, 0)) < 0)
+            if ((ret = get_packet(s, 0)) < 0) {
+               av_log(s, AV_LOG_ERROR, "RTMP: Failed to get media packet during initialization\n");
                goto fail;
+            }
         }
 
         // Either after we have read the metadata or (if there is none) the
@@ -2903,8 +3159,10 @@
         // the server returned a valid duration, create a fake metadata packet
         // to inform the FLV decoder about the duration.
         if (!rt->received_metadata && rt->duration > 0) {
-            if ((ret = inject_fake_duration_metadata(rt)) < 0)
+            if ((ret = inject_fake_duration_metadata(rt)) < 0) {
+                av_log(s, AV_LOG_ERROR, "RTMP: Failed to inject fake duration metadata\n");
                 goto fail;
+            }
         }
     } else {
         rt->flv_size = 0;
@@ -2915,9 +3173,11 @@
 
     s->max_packet_size = rt->stream->max_packet_size;
     s->is_streamed     = 1;
+    av_log(s, AV_LOG_INFO, "RTMP: Connection successfully established\n");
     return 0;
 
 fail:
+    av_log(s, AV_LOG_ERROR, "RTMP: Connection failed with error: %s\n", av_err2str(ret));
     rtmp_close(s);
     return ret;
 }
@@ -2943,8 +3203,16 @@
             rt->flv_off = rt->flv_size;
             return data_left;
         }
-        if ((ret = get_packet(s, 0)) < 0)
-           return ret;
+        if ((ret = get_packet(s, 0)) < 0) {
+            // Check if this is a connection error and reconnect is enabled
+            if ((ret == AVERROR(EIO) || ret == AVERROR(EPIPE) || ret == AVERROR(ECONNRESET)) 
+                && rt->reconnect_enabled && rt->is_input) {
+                av_log(s, AV_LOG_WARNING, "RTMP: Connection error in rtmp_read, reconnect will be handled in get_packet\n");
+            } else {
+                av_log(s, AV_LOG_ERROR, "RTMP: Read error: %s\n", av_err2str(ret));
+            }
+            return ret;
+        }
     }
     return orig_size;
 }
@@ -2956,11 +3224,11 @@
     RTMPContext *rt = s->priv_data;
     int ret;
     av_log(s, AV_LOG_DEBUG,
-           "Seek on stream index %d at timestamp %"PRId64" with flags %08x\n",
+           "RTMP: Seek on stream index %d at timestamp %"PRId64" with flags %08x\n",
            stream_index, timestamp, flags);
     if ((ret = gen_seek(s, rt, timestamp)) < 0) {
         av_log(s, AV_LOG_ERROR,
-               "Unable to send seek command on stream index %d at timestamp "
+               "RTMP: Unable to send seek command on stream index %d at timestamp "
                "%"PRId64" with flags %08x\n",
                stream_index, timestamp, flags);
         return ret;
@@ -2975,10 +3243,10 @@
     URLContext *s = opaque;
     RTMPContext *rt = s->priv_data;
     int ret;
-    av_log(s, AV_LOG_DEBUG, "Pause at timestamp %d\n",
+    av_log(s, AV_LOG_DEBUG, "RTMP: Pause at timestamp %d\n",
            rt->last_timestamp);
     if ((ret = gen_pause(s, rt, pause, rt->last_timestamp)) < 0) {
-        av_log(s, AV_LOG_ERROR, "Unable to send pause command at timestamp %d\n",
+        av_log(s, AV_LOG_ERROR, "RTMP: Unable to send pause command at timestamp %d\n",
                rt->last_timestamp);
         return ret;
     }
@@ -3039,10 +3307,17 @@
 
             //this can be a big packet, it's better to send it right here
             if ((ret = ff_rtmp_packet_create(&rt->out_pkt, channel,
-                                             pkttype, ts, pktsize)) < 0)
+                                             pkttype, ts, pktsize)) < 0) {
+                av_log(s, AV_LOG_ERROR, "RTMP: Failed to create packet for writing\n");
                 return ret;
+            }
 
-            rt->out_pkt.extra = rt->stream_id;
+            // If rt->listen, then we're running as a a server and should
+            // use the ID that we've sent in Stream Begin and in the
+            // _result to createStream.
+            // Otherwise, we're running as a client and should use the ID
+            // that we've received in the createStream from the server.
+            rt->out_pkt.extra = (rt->listen) ? rt->nb_streamid : rt->stream_id;
             rt->flv_data = rt->out_pkt.data;
         }
 
@@ -3070,6 +3345,7 @@
                         !strcmp(commandbuffer, "|RtmpSampleAccess")) {
                         uint8_t *ptr;
                         if ((ret = av_reallocp(&rt->out_pkt.data, rt->out_pkt.size + 16)) < 0) {
+                            av_log(s, AV_LOG_ERROR, "RTMP: Failed to reallocate packet data for @setDataFrame\n");
                             rt->flv_size = rt->flv_off = rt->flv_header_bytes = 0;
                             return ret;
                         }
@@ -3081,8 +3357,10 @@
                 }
             }
 
-            if ((ret = rtmp_send_packet(rt, &rt->out_pkt, 0)) < 0)
+            if ((ret = rtmp_send_packet(rt, &rt->out_pkt, 0)) < 0) {
+                av_log(s, AV_LOG_ERROR, "RTMP: Failed to send packet\n");
                 return ret;
+            }
             rt->flv_size = 0;
             rt->flv_off = 0;
             rt->flv_header_bytes = 0;
@@ -3114,11 +3392,15 @@
         if ((ret = ff_rtmp_packet_read_internal(rt->stream, &rpkt,
                                                 rt->in_chunk_size,
                                                 &rt->prev_pkt[0],
-                                                &rt->nb_prev_pkt[0], c)) <= 0)
+                                                &rt->nb_prev_pkt[0], c)) <= 0) {
+             av_log(s, AV_LOG_ERROR, "RTMP: Failed to read packet during write flush\n");
              return ret;
+        }
 
-        if ((ret = rtmp_parse_result(s, rt, &rpkt)) < 0)
+        if ((ret = rtmp_parse_result(s, rt, &rpkt)) < 0) {
+            av_log(s, AV_LOG_ERROR, "RTMP: Failed to parse result during write flush\n");
             return ret;
+        }
 
         ff_rtmp_packet_destroy(&rpkt);
     }
@@ -3153,6 +3435,9 @@
     {"listen",      "Listen for incoming rtmp connections", OFFSET(listen), AV_OPT_TYPE_INT, {.i64 = 0}, INT_MIN, INT_MAX, DEC, .unit = "rtmp_listen" },
     {"tcp_nodelay", "Use TCP_NODELAY to disable Nagle's algorithm", OFFSET(tcp_nodelay), AV_OPT_TYPE_INT, {.i64 = 0}, 0, 1, DEC|ENC},
     {"timeout", "Maximum timeout (in seconds) to wait for incoming connections. -1 is infinite. Implies -rtmp_listen 1",  OFFSET(listen_timeout), AV_OPT_TYPE_INT, {.i64 = -1}, INT_MIN, INT_MAX, DEC, .unit = "rtmp_listen" },
+    {"rtmp_reconnect", "Enable automatic reconnection on connection failure", OFFSET(reconnect_enabled), AV_OPT_TYPE_INT, {.i64 = 1}, 0, 1, DEC},
+    {"rtmp_reconnect_timeout", "Maximum time in seconds to attempt reconnection (default: 60)", OFFSET(reconnect_timeout), AV_OPT_TYPE_INT, {.i64 = 60}, 1, 3600, DEC},
+    {"rtmp_max_reconnect_attempts", "Maximum number of reconnect attempts (default: 10)", OFFSET(max_reconnect_attempts), AV_OPT_TYPE_INT, {.i64 = 10}, 1, 100, DEC},
     { NULL },
 };
 
@@ -3189,4 +3474,4 @@
 RTMP_PROTOCOL(rtmps,  RTMPS)
 RTMP_PROTOCOL(rtmpt,  RTMPT)
 RTMP_PROTOCOL(rtmpte, RTMPTE)
-RTMP_PROTOCOL(rtmpts, RTMPTS)
+RTMP_PROTOCOL(rtmpts, RTMPTS)
\ No newline at end of file
